---
layout: post
title: "Manacher算法"
data: 2025-03-23 00:00:00 +0800
categories: [Algorithm]
---
# Manacher算法
## 简介
- Manacher算法算法由 Glenn K. Manacher 在 1975 年提出，用来解决给定一个字符串s，找出所有对(i, j)使得s[i...j]为一个回文串
- 对中心扩展算法的扩展
## 中心扩展算法
- 中心扩展算法的思想就是以一个字母（奇数）或一对相邻字母（偶数）向两边扩展
    - 如果两边的字母相同，我们就可以继续扩展，例如从 P(i+1,j−1) 扩展到 P(i,j)；
    - 如果两边的字母不同或者到了边界，就停止扩展，因为在这之后的子串都不能是回文串了
- 代码实现比较简单

```c++
pair<int, int> expandAroundCenter(const string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        --left;
        ++right;
    }
    return {left + 1, right - 1};
}
string longestPalindrome(string s) {
    int start = 0, end = 0;
    for (int i = 0; i < s.size(); ++i) {
        auto [left1, right1] = expandAroundCenter(s, i, i);
        auto [left2, right2] = expandAroundCenter(s, i, i + 1);

        if (right1 - left1 > end - start) {
            start = left1;
            end = right1;
        }
        if (right2 - left2 > end - start) {
            start = left2;
            end = right2;
        }
    }
    return s.substr(start, end - start + 1);
}
```
## Manacher算法原理
- Manacher算法的思想就是在中心扩展算法的基础上，运用之前的结果来减少扩展过程
- 为了表述方便，先思考奇数情况，首先定义一个新概念**臂长**，表示中心扩展算法向外扩展的长度。如果一个位置的最大回文字符串长度为 2 * length + 1 ，其臂长为 length。
- 如图所示，如果位置**j**的臂长为length，并且有**j + length > i**当在位置i开始进行中心拓展时，我们可以先找到i关于j的**对称点** 2 * j - i。  
![Manacher]({{ site.baseurl }}/assets/images/Manacher.png)  
- 如果对称点的臂长等于n，则点i的臂长至少为min(j + length - i, n)，因为j和**对称点**的都是之前计算过的。那么就可以直接跳过i到i + min(j + length - i, n)这部分，从i + min(j + length - i, n) + 1开始拓展。  
- 奇数情况的代码如下

```c++
int expandAroundCenter(const string& s, int left, int right)
{
    while (left >= 0 && right < s.size() && s[left] == s[right])
    {
        --left;
        ++right;
    }
    return (right - left - 2) / 2;
}

vector<int> longestPalindrome(string s)
{
    vector<int> arm_len;
    int right = -1, j = -1;

    for (int i = 0; i < s.size(); ++i)
    {
        int cur_arm_len;
        // 之前中心的臂长是否能覆盖当前
        if (right >= i)
        {
            // 对称点
            int i_sym = j * 2 - i;
            int min_arm_len = min(arm_len[i_sym], right - i);
            cur_arm_len = expandAroundCenter(s, i - min_arm_len, i + min_arm_len);
        }
        else
        {
            cur_arm_len = expandAroundCenter(s, i, i);
        }

        arm_len.push_back(cur_arm_len);
        // 更新j和right
        if (i + cur_arm_len > right)
        {
            j = i;
            right = i + cur_arm_len;
        }
    }

    return arm_len;
}

```

- 偶数情况可以通过一个特别的操作将奇偶数的情况统一起来：向字符串的头尾以及每两个字符中间添加一个特殊字符 #，比如字符串 aaba 处理后会变成 #a#a#b#a#。那么原先长度为偶数的回文字符串 aa 会变成长度为奇数的回文字符串 #a#a#，而长度为奇数的回文字符串 aba 会变成长度仍然为奇数的回文字符串 #a#b#a#，就不需要再考虑长度为偶数的回文字符串了。


```c++
int expand(const string& s, int left, int right)
{
    while (left >= 0 && right < s.size() && s[left] == s[right])
    {
        --left;
        ++right;
    }
    return (right - left - 2) / 2;
}

string longestPalindrome(string s)
{
    int start = 0, end = -1;
    string t = "#";

    for (char c: s)
    {
        t += c;
        t += '#';
    }

    t += '#';
    s = t;

    vector<int> arm_len;
    int right = -1, j = -1;

    for (int i = 0; i < s.size(); ++i)
    {
        int cur_arm_len;
        // 之前中心的臂长是否能覆盖当前
        if (right >= i)
        {
            // 对称点
            int i_sym = j * 2 - i;
            int min_arm_len = min(arm_len[i_sym], right - i);
            cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);
        }
        else
        {
            cur_arm_len = expand(s, i, i);
        }

        arm_len.push_back(cur_arm_len);
        
        if (i + cur_arm_len > right)
        {
            j = i;
            right = i + cur_arm_len;
        }
        if (cur_arm_len * 2 + 1 > end - start) {
            start = i - cur_arm_len;
            end = i + cur_arm_len;
        }
    }

    string ans;
    for (int i = start; i <= end; ++i) {
        if (s[i] != '#') {
            ans += s[i];
        }
    }
    
    return ans;
}
```